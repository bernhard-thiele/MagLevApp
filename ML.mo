package ML
  model MagLev_AVRcl
    extends Modelica.Icons.Example;
    parameter Real Kp = 15, Td = 0.05, d0 = 0.019;
    Components.MagLevNL magLevNL(i0 = 0.27, d0 = d0, d_der0 = 0) annotation (
      Placement(visible = true, transformation(origin = {36, 10}, extent = {{-10, -10}, {10, 10}}, rotation = 0)));
    Modelica_Synchronous.ClockSignals.Clocks.PeriodicRealClock periodicClock1(period = 0.0005) annotation (
      Placement(transformation(extent = {{-60, -24}, {-50, -14}})));
    Components.ControlAVR control(Kp = Kp, Td = Td, h = 0.0005) annotation (
      Placement(transformation(extent = {{-20, 0}, {0, 20}})));
    Modelica_Synchronous.RealSignals.Sampler.HoldWithDAeffects hold1(quantized = true, shiftCounter = 1, yMax = 1.3, yMin = 0, computationalDelay = true, limited = true) annotation (
      Placement(transformation(extent = {{6, 4}, {18, 16}})));
    Modelica_Synchronous.RealSignals.Sampler.Sample sample2 annotation (
      Placement(transformation(extent = {{-44, 12}, {-32, 24}})));
    Modelica_Synchronous.RealSignals.Sampler.SampleWithADeffects sample1(limited = true, quantized = true, yMax = 5, yMin = 0, bits = 10) annotation (
      Placement(transformation(extent = {{-62, -6}, {-50, 6}})));
    Modelica_Synchronous.RealSignals.Sampler.AssignClock assignClock1 annotation (
      Placement(transformation(extent = {{-44, -6}, {-32, 6}})));
    Modelica.Blocks.Sources.RealExpression du_set(y = 0) annotation (
      Placement(transformation(extent = {{-68, 12}, {-54, 24}})));
  equation
    connect(hold1.y, magLevNL.v) annotation (
      Line(points = {{18.6, 10}, {24, 10}}, color = {0, 0, 127}));
    connect(sample1.y, assignClock1.u) annotation (
      Line(points = {{-49.4, 0}, {-45.2, 0}}, color = {0, 0, 127}));
    connect(assignClock1.y, control.e) annotation (
      Line(points = {{-31.4, 0}, {-26, 0}, {-26, 10}, {-22, 10}}, color = {0, 0, 127}));
    connect(periodicClock1.y, assignClock1.clock) annotation (
      Line(points = {{-49.5, -19}, {-38, -19}, {-38, -7.2}}, color = {175, 175, 175}, pattern = LinePattern.Dot, thickness = 0.5));
    connect(control.v, hold1.u) annotation (
      Line(points = {{1, 10}, {4.8, 10}}, color = {0, 0, 127}));
    connect(sample2.y, control.du_set) annotation (
      Line(points = {{-31.4, 18}, {-22, 18}}, color = {0, 0, 127}));
    connect(du_set.y, sample2.u) annotation (
      Line(points = {{-53.3, 18}, {-45.2, 18}}, color = {0, 0, 127}));
    connect(magLevNL.e, sample1.u) annotation (
      Line(points = {{47, 10}, {54, 10}, {54, -32}, {-68, -32}, {-68, 0}, {-63.2, 0}}, color = {0, 0, 127}));
  end MagLev_AVRcl;

  model MagLev_AVRcl_CT
    extends Modelica.Icons.Example;
    parameter Real Kp = 15, Td = 0.05, d0 = 0.0195;
    Components.MagLevNL magLevNL(i0 = 0.27, d0 = d0, d_der0 = 0) annotation (
      Placement(visible = true, transformation(origin = {20, 10}, extent = {{-10, -10}, {10, 10}}, rotation = 0)));
    Components.ControlAVR_CT control(Kp = Kp, Td = Td) annotation (
      Placement(transformation(extent = {{-20, 0}, {0, 20}})));
    Modelica.Blocks.Sources.RealExpression du_set(y = 0) annotation (
      Placement(transformation(extent = {{-44, 12}, {-30, 24}})));
  equation
    connect(magLevNL.e, control.e) annotation (
      Line(points = {{31, 10}, {40, 10}, {40, -10}, {-30, -10}, {-30, 10}, {-22, 10}}, color = {0, 0, 127}));
    connect(control.v, magLevNL.v) annotation (
      Line(points = {{1, 10}, {8, 10}}, color = {0, 0, 127}));
    connect(du_set.y, control.du_set) annotation (
      Line(points = {{-29.3, 18}, {-22, 18}}, color = {0, 0, 127}));
    annotation (
      experiment(StartTime = 0, StopTime = 1, Tolerance = 1e-6, Interval = 0.0005));
  end MagLev_AVRcl_CT;

  model MagLev_AVR_ACG "Model for automatic code generation to Arduino target hardware"
    extends Modelica.Icons.Example;
    import Modelica_DeviceDrivers.EmbeddedTargets.AVR.Types.*;
    parameter Real Kp = 15, Td = 0.05, d0 = 0.019;
    constant Real v_max = 1.3 "Voltage limitation for coil";
    Modelica_Synchronous.ClockSignals.Clocks.PeriodicRealClock periodicClock1(period = 0.0005) annotation (
      Placement(transformation(extent = {{-96, -34}, {-86, -24}})));
    Components.ControlAVR control(Kp = Kp, Td = Td, h = 0.0005) annotation (
      Placement(transformation(extent = {{-40, 0}, {-20, 20}})));
    Modelica_Synchronous.RealSignals.Sampler.AssignClock assignClock1 annotation (
      Placement(transformation(extent = {{-66, -6}, {-54, 6}})));
    Modelica.Blocks.Sources.RealExpression du_set(y = 0) annotation (
      Placement(transformation(extent = {{-100, 12}, {-86, 24}})));
    inner Modelica_DeviceDrivers.EmbeddedTargets.AVR.Blocks.Microcontroller mcu(desiredPeriod = 0.0005, platform = Modelica_DeviceDrivers.EmbeddedTargets.AVR.Types.Platform.ATmega328P) annotation (
      Placement(transformation(extent = {{-80, 40}, {-60, 60}})));
    Modelica_DeviceDrivers.EmbeddedTargets.AVR.Blocks.PWM pwm(timer = Modelica_DeviceDrivers.EmbeddedTargets.AVR.Types.TimerSelect.Timer1, prescaler = Modelica_DeviceDrivers.EmbeddedTargets.AVR.Types.TimerPrescaler.'1/8', timerNumbers = {TimerNumber.A}) annotation (
      Placement(transformation(extent = {{80, 0}, {100, 20}})));
    Modelica_DeviceDrivers.EmbeddedTargets.AVR.Blocks.ADC adc(voltageReference = 5, voltageReferenceSelect = Modelica_DeviceDrivers.EmbeddedTargets.AVR.Types.VRefSelect.AREF, analogPort = Modelica_DeviceDrivers.EmbeddedTargets.AVR.Types.AnalogPort.A0) annotation (
      Placement(transformation(extent = {{-100, -10}, {-80, 10}})));
    Modelica.Blocks.Math.RealToInteger realToInteger annotation (
      Placement(transformation(extent = {{50, 0}, {70, 20}})));
    Components.Limiter limiter(uMax = v_max, uMin = 0) annotation (
      Placement(transformation(extent = {{-10, 0}, {10, 20}})));
    Modelica.Blocks.Math.Gain gain(k = 255 / v_max) annotation (
      Placement(transformation(extent = {{20, 0}, {40, 20}})));
    Modelica_DeviceDrivers.EmbeddedTargets.AVR.Blocks.SynchronizeRealtime synchronizeRealtime1(timer = Modelica_DeviceDrivers.EmbeddedTargets.AVR.Types.TimerSelect.Timer0) annotation (
      Placement(visible = true, transformation(origin = {-30, 50}, extent = {{-10, -10}, {10, 10}}, rotation = 0)));
  equation
    connect(assignClock1.y, control.e) annotation (
      Line(points = {{-53.4, 0}, {-48, 0}, {-48, 10}, {-42, 10}}, color = {0, 0, 127}));
    connect(periodicClock1.y, assignClock1.clock) annotation (
      Line(points = {{-85.5, -29}, {-60, -29}, {-60, -7.2}}, color = {175, 175, 175}, pattern = LinePattern.Dot, thickness = 0.5));
    connect(du_set.y, control.du_set) annotation (
      Line(points = {{-85.3, 18}, {-42, 18}}, color = {0, 0, 127}));
    connect(adc.y, assignClock1.u) annotation (
      Line(points = {{-79, 0}, {-67.2, 0}}, color = {0, 0, 127}));
    connect(control.v, limiter.u) annotation (
      Line(points = {{-19, 10}, {-12, 10}}, color = {0, 0, 127}));
    connect(limiter.y, gain.u) annotation (
      Line(points = {{11, 10}, {18, 10}}, color = {0, 0, 127}));
    connect(gain.y, realToInteger.u) annotation (
      Line(points = {{41, 10}, {48, 10}}, color = {0, 0, 127}));
    connect(realToInteger.y, pwm.u[1]) annotation (
      Line(points = {{71, 10}, {78, 10}}, color = {255, 127, 0}));
    annotation (
      Diagram(graphics={  Text(extent = {{-86, 96}, {92, 80}}, lineColor = {28, 108, 200}, textString = "Model for automatic code generation to Arduino Uno")}));
  end MagLev_AVR_ACG;

  model MagLev_AVR_ACG_CT "Continuous-Time model for automatic code generation to Arduino target hardware"
    extends Modelica.Icons.Example;
    import Modelica_DeviceDrivers.EmbeddedTargets.AVR.Types.*;
    parameter Real Kp = 15, Td = 0.05, d0 = 0.019;
    constant Real v_max = 1.3 "Voltage limitation for coil";
    Components.ControlAVR_CT control(Kp = Kp, Td = Td) annotation (
      Placement(transformation(extent = {{-40, 0}, {-20, 20}})));
    Modelica.Blocks.Sources.RealExpression du_set(y = 0) annotation (
      Placement(transformation(extent = {{-100, 12}, {-86, 24}})));
    inner Modelica_DeviceDrivers.EmbeddedTargets.AVR.Blocks.Microcontroller mcu(desiredPeriod = 0.0005, platform = Modelica_DeviceDrivers.EmbeddedTargets.AVR.Types.Platform.ATmega328P) annotation (
      Placement(transformation(extent = {{-80, 40}, {-60, 60}})));
    Modelica_DeviceDrivers.EmbeddedTargets.AVR.Blocks.PWM pwm(timer = Modelica_DeviceDrivers.EmbeddedTargets.AVR.Types.TimerSelect.Timer1, prescaler = Modelica_DeviceDrivers.EmbeddedTargets.AVR.Types.TimerPrescaler.'1/8', timerNumbers = {TimerNumber.A}) annotation (
      Placement(transformation(extent = {{80, 0}, {100, 20}})));
    Modelica_DeviceDrivers.EmbeddedTargets.AVR.Blocks.ADC adc(voltageReference = 5, voltageReferenceSelect = Modelica_DeviceDrivers.EmbeddedTargets.AVR.Types.VRefSelect.AREF, analogPort = Modelica_DeviceDrivers.EmbeddedTargets.AVR.Types.AnalogPort.A0) annotation (
      Placement(transformation(extent = {{-100, -10}, {-80, 10}})));
    Modelica.Blocks.Math.RealToInteger realToInteger annotation (
      Placement(transformation(extent = {{50, 0}, {70, 20}})));
    Components.Limiter limiter(uMax = v_max, uMin = 0) annotation (
      Placement(transformation(extent = {{-10, 0}, {10, 20}})));
    Modelica.Blocks.Math.Gain gain(k = 255 / v_max) annotation (
      Placement(transformation(extent = {{20, 0}, {40, 20}})));
    Modelica_DeviceDrivers.EmbeddedTargets.AVR.Blocks.SynchronizeRealtime synchronizeRealtime1(timer = Modelica_DeviceDrivers.EmbeddedTargets.AVR.Types.TimerSelect.Timer0) annotation (
      Placement(visible = true, transformation(origin = {-30, 50}, extent = {{-10, -10}, {10, 10}}, rotation = 0)));
  equation
    connect(du_set.y, control.du_set) annotation (
      Line(points = {{-85.3, 18}, {-42, 18}}, color = {0, 0, 127}));
    connect(control.v, limiter.u) annotation (
      Line(points = {{-19, 10}, {-12, 10}}, color = {0, 0, 127}));
    connect(limiter.y, gain.u) annotation (
      Line(points = {{11, 10}, {18, 10}}, color = {0, 0, 127}));
    connect(gain.y, realToInteger.u) annotation (
      Line(points = {{41, 10}, {48, 10}}, color = {0, 0, 127}));
    connect(realToInteger.y, pwm.u[1]) annotation (
      Line(points = {{71, 10}, {78, 10}}, color = {255, 127, 0}));
    connect(adc.y, control.e) annotation (
      Line(points = {{-79, 0}, {-50, 0}, {-50, 10}, {-42, 10}}, color = {0, 0, 127}));
    annotation (
      Diagram(graphics={  Text(lineColor = {28, 108, 200}, extent = {{-92, 94}, {92, 80}}, textString = "Continuous-Time model for automatic code generation to Arduino Uno")}, coordinateSystem(initialScale = 0.1)));
  end MagLev_AVR_ACG_CT;

  model MagLev_AVR_ACG_CT_2_5VTo3_5V "Like MagLevAVR_ACG_CT but for analog preprocessed Hall sensor signal, [2.5V,3.5V] are mapped to [0V,5V]."
    extends Modelica.Icons.Example;
    import Modelica_DeviceDrivers.EmbeddedTargets.AVR.Types.*;
    parameter Real Kp = 15, Td = 0.05, d0 = 0.019;
    constant Real v_max = 1.3 "Voltage limitation for coil";
    Components.ControlAVR_CT control(Kp=15, Td=0.05)   annotation (
      Placement(transformation(extent = {{-40, 0}, {-20, 20}})));
    Modelica.Blocks.Sources.RealExpression du_set(y = 0) annotation (
      Placement(transformation(extent = {{-100, 12}, {-86, 24}})));
    inner Modelica_DeviceDrivers.EmbeddedTargets.AVR.Blocks.Microcontroller mcu(desiredPeriod = 0.0005, platform = Modelica_DeviceDrivers.EmbeddedTargets.AVR.Types.Platform.ATmega328P) annotation (
      Placement(transformation(extent = {{-80, 40}, {-60, 60}})));
    Modelica_DeviceDrivers.EmbeddedTargets.AVR.Blocks.PWM pwm(timer = Modelica_DeviceDrivers.EmbeddedTargets.AVR.Types.TimerSelect.Timer1, prescaler = Modelica_DeviceDrivers.EmbeddedTargets.AVR.Types.TimerPrescaler.'1/8',
      timerNumbers={TimerNumber.A,TimerNumber.B})                                                                                                                                                                                           annotation (
      Placement(transformation(extent = {{86, -2}, {106, 18}})));
    Modelica_DeviceDrivers.EmbeddedTargets.AVR.Blocks.ADC adc(voltageReference = 5,                                                                                            analogPort = Modelica_DeviceDrivers.EmbeddedTargets.AVR.Types.AnalogPort.A0,
      voltageReferenceSelect=Modelica_DeviceDrivers.EmbeddedTargets.AVR.Types.VRefSelect.AVCC)                                                                                                                annotation (
      Placement(transformation(extent = {{-100, -82}, {-80, -62}})));
    Modelica.Blocks.Math.RealToInteger realToInteger annotation (
      Placement(transformation(extent = {{50, 0}, {70, 20}})));
    Components.Limiter limiter(uMax = v_max, uMin = 0) annotation (
      Placement(transformation(extent = {{-10, 0}, {10, 20}})));
    Modelica.Blocks.Math.Gain gain(k = 255 / v_max) annotation (
      Placement(transformation(extent = {{20, 0}, {40, 20}})));
    Modelica_DeviceDrivers.EmbeddedTargets.AVR.Blocks.SynchronizeRealtime synchronizeRealtime1(timer = Modelica_DeviceDrivers.EmbeddedTargets.AVR.Types.TimerSelect.Timer0) annotation (
      Placement(visible = true, transformation(origin = {-30, 50}, extent = {{-10, -10}, {10, 10}}, rotation = 0)));
    Modelica.Blocks.Sources.Constant signalOffset(k = 2.47)
      "Also 2.48 seems to be a good value"                  annotation (
      Placement(transformation(extent = {{-100, -40}, {-80, -20}})));
    Modelica.Blocks.Math.Add add annotation (
      Placement(transformation(extent = {{-30, -50}, {-10, -30}})));
    Modelica.Blocks.Math.Gain gain1(k=0.22)
      "Also 0.23 seems to be a good value"       annotation (
      Placement(transformation(extent = {{-64, -56}, {-44, -36}})));
    Modelica_DeviceDrivers.EmbeddedTargets.AVR.Blocks.DigitalWriteBoolean debugLED1(pin=
          Modelica_DeviceDrivers.EmbeddedTargets.AVR.Types.Pin.'5', port=
          Modelica_DeviceDrivers.EmbeddedTargets.AVR.Types.Port.B) annotation (
        Placement(visible=true, transformation(
          origin={30,-70},
          extent={{-10,-10},{10,10}},
          rotation=0)));
    Modelica.Blocks.Logical.GreaterThreshold greaterThreshold(threshold = 1) annotation (
      Placement(transformation(extent = {{-16, -80}, {4, -60}})));
    Modelica_DeviceDrivers.EmbeddedTargets.AVR.Blocks.DigitalWriteBoolean debugLED2(pin=
          Modelica_DeviceDrivers.EmbeddedTargets.AVR.Types.Pin.'3', port=
          Modelica_DeviceDrivers.EmbeddedTargets.AVR.Types.Port.D) annotation (
        Placement(visible=true, transformation(
          origin={98,-32},
          extent={{-10,-10},{10,10}},
          rotation=0)));
    Modelica.Blocks.Logical.GreaterThreshold greaterThreshold1(threshold=240)
                                                                             annotation (
      Placement(transformation(extent={{50,-30},{70,-10}})));
  equation
    connect(du_set.y, control.du_set) annotation (
      Line(points = {{-85.3, 18}, {-42, 18}}, color = {0, 0, 127}));
    connect(control.v, limiter.u) annotation (
      Line(points = {{-19, 10}, {-12, 10}}, color = {0, 0, 127}));
    connect(limiter.y, gain.u) annotation (
      Line(points = {{11, 10}, {18, 10}}, color = {0, 0, 127}));
    connect(gain.y, realToInteger.u) annotation (
      Line(points = {{41, 10}, {48, 10}}, color = {0, 0, 127}));
    connect(adc.y, gain1.u) annotation (
      Line(points = {{-79, -72}, {-74, -72}, {-74, -46}, {-66, -46}}, color = {0, 0, 127}));
    connect(gain1.y, add.u2) annotation (
      Line(points = {{-43, -46}, {-32, -46}}, color = {0, 0, 127}));
    connect(signalOffset.y, add.u1) annotation (
      Line(points = {{-79, -30}, {-40, -30}, {-40, -34}, {-32, -34}}, color = {0, 0, 127}));
    connect(adc.y, greaterThreshold.u) annotation (
      Line(points = {{-79, -72}, {-48, -72}, {-48, -70}, {-18, -70}}, color = {0, 0, 127}));
    connect(greaterThreshold.y, debugLED1.u)
      annotation (Line(points={{5,-70},{18,-70}}, color={255,0,255}));
    connect(realToInteger.y, pwm.u[1]) annotation (Line(points={{71,10},{76,10},{76,
            7},{84,7}}, color={255,127,0}));
    connect(greaterThreshold1.y, debugLED2.u) annotation (Line(points={{71,-20},{80,
            -20},{80,-32},{86,-32}}, color={255,0,255}));
    connect(realToInteger.y, pwm.u[2])
      annotation (Line(points={{71,10},{84,10},{84,9}}, color={255,127,0}));
    connect(add.y, control.e) annotation (Line(points={{-9,-40},{-2,-40},{-2,-22},
            {-50,-22},{-50,10},{-42,10},{-42,10}}, color={0,0,127}));
    connect(greaterThreshold1.u, realToInteger.u) annotation (Line(points={{48,-20},
            {44,-20},{44,10},{48,10}}, color={0,0,127}));
    annotation (
      Diagram(graphics={  Text(lineColor = {28, 108, 200}, extent = {{-92, 94}, {92, 80}}, textString = "Continuous-Time model for automatic code generation to
Arduino Uno with analog preprocessing of Hall sensor signal")}, coordinateSystem(initialScale = 0.1)));
  end MagLev_AVR_ACG_CT_2_5VTo3_5V;

  model MagLev_AVR_ACG_Workaround_2_5VTo3_5V
    "Workaround to get sampled system despite missing code generator support"
    extends Modelica.Icons.Example;
    import Modelica_DeviceDrivers.EmbeddedTargets.AVR.Types.*;
    parameter Real Kp = 15, Td = 0.05, d0 = 0.019;
    constant Real v_max = 1.3 "Voltage limitation for coil";
    Components.ControlAVR_workaround
                             control(Kp=15, Td=0.05)   annotation (
      Placement(transformation(extent = {{-40, 0}, {-20, 20}})));
    Modelica.Blocks.Sources.RealExpression du_set(y = 0) annotation (
      Placement(transformation(extent = {{-100, 12}, {-86, 24}})));
    inner Modelica_DeviceDrivers.EmbeddedTargets.AVR.Blocks.Microcontroller mcu(desiredPeriod = 0.0005, platform = Modelica_DeviceDrivers.EmbeddedTargets.AVR.Types.Platform.ATmega328P) annotation (
      Placement(transformation(extent = {{-80, 40}, {-60, 60}})));
    Modelica_DeviceDrivers.EmbeddedTargets.AVR.Blocks.PWM pwm(timer = Modelica_DeviceDrivers.EmbeddedTargets.AVR.Types.TimerSelect.Timer1, prescaler = Modelica_DeviceDrivers.EmbeddedTargets.AVR.Types.TimerPrescaler.'1/8',
      timerNumbers={TimerNumber.A})                                                                                                                                                                                                         annotation (
      Placement(transformation(extent = {{86, -2}, {106, 18}})));
    Modelica_DeviceDrivers.EmbeddedTargets.AVR.Blocks.ADC adc(voltageReference = 5,                                                                                            analogPort = Modelica_DeviceDrivers.EmbeddedTargets.AVR.Types.AnalogPort.A0,
      voltageReferenceSelect=Modelica_DeviceDrivers.EmbeddedTargets.AVR.Types.VRefSelect.AVCC)                                                                                                                annotation (
      Placement(transformation(extent = {{-100, -82}, {-80, -62}})));
    Modelica.Blocks.Math.RealToInteger realToInteger annotation (
      Placement(transformation(extent = {{50, 0}, {70, 20}})));
    Components.Limiter limiter(uMax = v_max, uMin = 0) annotation (
      Placement(transformation(extent = {{-10, 0}, {10, 20}})));
    Modelica.Blocks.Math.Gain gain(k = 255 / v_max) annotation (
      Placement(transformation(extent = {{20, 0}, {40, 20}})));
    Modelica_DeviceDrivers.EmbeddedTargets.AVR.Blocks.SynchronizeRealtime synchronizeRealtime1(timer = Modelica_DeviceDrivers.EmbeddedTargets.AVR.Types.TimerSelect.Timer0) annotation (
      Placement(visible = true, transformation(origin = {-30, 50}, extent = {{-10, -10}, {10, 10}}, rotation = 0)));
    Modelica.Blocks.Sources.Constant signalOffset(k=2.47)
      "Also 2.48 seems to be a good value"                  annotation (
      Placement(transformation(extent = {{-100, -40}, {-80, -20}})));
    Modelica.Blocks.Math.Add add annotation (
      Placement(transformation(extent = {{-30, -50}, {-10, -30}})));
    Modelica.Blocks.Math.Gain gain1(k=0.22)
      "Also 0.23 seems to be a good value"       annotation (
      Placement(transformation(extent = {{-64, -56}, {-44, -36}})));
    Modelica_DeviceDrivers.EmbeddedTargets.AVR.Blocks.DigitalWriteBoolean debugLED1(pin=
          Modelica_DeviceDrivers.EmbeddedTargets.AVR.Types.Pin.'5', port=
          Modelica_DeviceDrivers.EmbeddedTargets.AVR.Types.Port.B) annotation (
        Placement(visible=true, transformation(
          origin={30,-70},
          extent={{-10,-10},{10,10}},
          rotation=0)));
    Modelica.Blocks.Logical.GreaterThreshold greaterThreshold(threshold=20)  annotation (
      Placement(transformation(extent = {{-16, -80}, {4, -60}})));
    Modelica_DeviceDrivers.EmbeddedTargets.AVR.Blocks.DigitalWriteBoolean debugLED2(pin=
          Modelica_DeviceDrivers.EmbeddedTargets.AVR.Types.Pin.'3', port=
          Modelica_DeviceDrivers.EmbeddedTargets.AVR.Types.Port.D) annotation (
        Placement(visible=true, transformation(
          origin={98,-32},
          extent={{-10,-10},{10,10}},
          rotation=0)));
    Modelica.Blocks.Logical.GreaterThreshold greaterThreshold1(threshold=240)
                                                                             annotation (
      Placement(transformation(extent={{50,-30},{70,-10}})));
    Modelica.Blocks.Sources.RealExpression du_set1(y=time)
                                                         annotation (
      Placement(transformation(extent={{-48,-76},{-34,-64}})));
  equation
    connect(du_set.y, control.du_set) annotation (
      Line(points = {{-85.3, 18}, {-42, 18}}, color = {0, 0, 127}));
    connect(control.v, limiter.u) annotation (
      Line(points = {{-19, 10}, {-12, 10}}, color = {0, 0, 127}));
    connect(limiter.y, gain.u) annotation (
      Line(points = {{11, 10}, {18, 10}}, color = {0, 0, 127}));
    connect(gain.y, realToInteger.u) annotation (
      Line(points = {{41, 10}, {48, 10}}, color = {0, 0, 127}));
    connect(adc.y, gain1.u) annotation (
      Line(points = {{-79, -72}, {-74, -72}, {-74, -46}, {-66, -46}}, color = {0, 0, 127}));
    connect(gain1.y, add.u2) annotation (
      Line(points = {{-43, -46}, {-32, -46}}, color = {0, 0, 127}));
    connect(signalOffset.y, add.u1) annotation (
      Line(points = {{-79, -30}, {-40, -30}, {-40, -34}, {-32, -34}}, color = {0, 0, 127}));
    connect(greaterThreshold.y, debugLED1.u)
      annotation (Line(points={{5,-70},{18,-70}}, color={255,0,255}));
    connect(greaterThreshold1.y, debugLED2.u) annotation (Line(points={{71,-20},{80,
            -20},{80,-32},{86,-32}}, color={255,0,255}));
    connect(add.y, control.e) annotation (Line(points={{-9,-40},{-2,-40},{-2,-22},
            {-50,-22},{-50,10},{-42,10},{-42,10}}, color={0,0,127}));
    connect(greaterThreshold1.u, realToInteger.u) annotation (Line(points={{48,-20},
            {44,-20},{44,10},{48,10}}, color={0,0,127}));
    connect(realToInteger.y, pwm.u[1]) annotation (Line(points={{71,10},{76,10},{76,
            8},{84,8}}, color={255,127,0}));
    connect(du_set1.y, greaterThreshold.u)
      annotation (Line(points={{-33.3,-70},{-18,-70}}, color={0,0,127}));
    annotation (
      Diagram(graphics={  Text(lineColor={28,108,200},     extent={{-90,94},{94,80}},
            textString="Workaround to get sampled system behaviour despite missing support in code generator.
Arduino Uno with analog preprocessing of Hall sensor signal."),
          Rectangle(extent={{50,-88},{-52,-54}}, lineColor={238,46,47}),
          Text(
            extent={{54,-68},{86,-76}},
            lineColor={238,46,47},
            textString="Check real-time")},                     coordinateSystem(initialScale = 0.1)));
  end MagLev_AVR_ACG_Workaround_2_5VTo3_5V;

  package Components
    model MagLevNL
      extends Modelica.Blocks.Interfaces.BlockIcon;
      extends MagLevSchematicsIcon;
      import Modelica.Blocks.Interfaces.*;
      parameter Real R = 2.41, L = 15.03e-3, m = 3.02e-3, k = 17.31e-9, alpha = 2.44, beta = 1.12e-4, gamma = 0.26;
      RealInput v annotation (
        Placement(transformation(extent = {{-140, -20}, {-100, 20}})));
      RealOutput e annotation (
        Placement(transformation(extent = {{100, -10}, {120, 10}})));
      parameter Real i0, d0, d_der0;
      Real i(start = i0, fixed = true), d(start = d0, fixed = true), d_der(start = d_der0, fixed = true), f;
      constant Real g = 9.81;
    equation
      f = k * i / d ^ 4;
      e = alpha + beta * 1 / d ^ 2 + gamma * i;
      der(d) = d_der;
      m * der(d_der) = m * g - f;
      v = R * i + L * der(i);
    end MagLevNL;

    block ControlAVR "Digital controller for the MagLev system"
      extends Modelica.Blocks.Interfaces.BlockIcon;
      extends ArduinoIcon;
      import Modelica.Blocks.Interfaces.*;
      parameter Real Kp = 15, Td = 0.05, Nd = 5, h = 0.0005, u_e = 0.66, y_e = 2.79;
      RealInput du_set(final unit = "V") "Desired setpoint OP delta voltage of PD controller" annotation (
        Placement(transformation(extent = {{-140, 60}, {-100, 100}})));
      RealInput e(final unit = "V") "Measured voltage across the hall effect sensor" annotation (
        Placement(transformation(extent = {{-140, -20}, {-100, 20}})));
      RealOutput v(final unit = "V") "Output voltage to the electromagnet" annotation (
        Placement(transformation(extent = {{100, -10}, {120, 10}})));
    protected
      Real Dpart(start = 0);
      Real dy_e "OP delta e Hall sensor voltage";
      Real du(start = 0) "OP delta u input to PD(T1) control law";
      Real dy "OP delta v output voltage to the electromagnet";
      Real ad, bd;
    equation
      // Measured delta voltage at OP
      dy_e = e - y_e;
      // input to PD(T1) control law
      du = du_set - dy_e;
      /* Discrete-time version of approximated derivative block (y=k*s*Td/(Td*s+1) * u).
  Discretized using backward-differences (s->(z-1)/(h*z)) */
      ad = Td / (Td + Nd * h);
      bd = Td * Nd / (Td + Nd * h);
      Dpart = ad * previous(Dpart) + bd * (du - previous(du));
      // Standard form of the PD controller with gain applied to P and D part
      dy = Kp * (du + Dpart);
      // Output voltage to electromagnet
      v = dy + u_e;
      annotation (
        Icon(graphics={Text(extent = {{-100, -68}, {100, -98}}, lineColor = {28, 108, 200}, textString = "h=%h s")}));
    end ControlAVR;

    block ControlAVR_workaround
      "Workaround to get sampled system despite missing code generator support"
      extends Modelica.Blocks.Interfaces.BlockIcon;
      extends ArduinoIcon;
      import Modelica.Blocks.Interfaces.*;
      parameter Real Kp = 15, Td = 0.05, Nd = 5, h = 0.0005, u_e = 0.66, y_e = 2.79;
      RealInput du_set(final unit = "V") "Desired setpoint OP delta voltage of PD controller" annotation (
        Placement(transformation(extent = {{-140, 60}, {-100, 100}})));
      RealInput e(final unit = "V") "Measured voltage across the hall effect sensor" annotation (
        Placement(transformation(extent = {{-140, -20}, {-100, 20}})));
      RealOutput v(final unit = "V") "Output voltage to the electromagnet" annotation (
        Placement(transformation(extent = {{100, -10}, {120, 10}})));
    protected
      discrete Real Dpart(start=0,fixed=true);
      discrete Real Dpart_pre(start=0,fixed=true) "Previous value of Dpart";
      discrete Real dy_e(start=0,fixed=true) "OP delta e Hall sensor voltage";
      discrete Real du(start=0,fixed=true) "OP delta u input to PD(T1) control law";
      discrete Real du_pre(start=0,fixed=true) "Previous value of du";
      discrete Real dy(start=0,fixed=true) "OP delta v output voltage to the electromagnet";
      discrete Real ad(start=0,fixed=true), bd(start=0,fixed=true);
    //  discrete Real lastRefresh(start=-10.0, fixed=true);
    algorithm
    //  if time-lastRefresh >= h then // We don't support sample(), or events... yet
        // Measured delta voltage at OP
        dy_e :=e - y_e;
        // input to PD(T1) control law
        du :=du_set - dy_e;
        /* Discrete-time version of approximated derivative block (y=k*s*Td/(Td*s+1) * u).
    Discretized using backward-differences (s->(z-1)/(h*z)) */
        ad :=Td/(Td + Nd*h);
        bd :=Td*Nd/(Td + Nd*h);
        Dpart :=ad*Dpart_pre + bd*(du - du_pre);
        // Standard form of the PD controller with gain applied to P and D part
        dy :=Kp*(du + Dpart);
        // Output voltage to electromagnet
        v :=dy + u_e;

        Dpart_pre := Dpart;
        du_pre := du;
    //    lastRefresh := time;
    //  end if;
      annotation (
        Icon(graphics={ Text(extent = {{-100, -68}, {100, -98}}, lineColor={0,0,0},textString = "h=%h s")}));
    end ControlAVR_workaround;

    model Limiter
      extends Modelica.Blocks.Interfaces.SISO;
      parameter Real uMax(start = 1) "Upper limits of input signals";
      parameter Real uMin = -uMax "Lower limits of input signals";
    equation
      y = if u > uMax then uMax else if u < uMin then uMin else u;
      annotation (
        Icon(coordinateSystem(preserveAspectRatio = false), graphics={  Line(points = {{0, -90}, {0, 68}}, color = {192, 192, 192}), Polygon(points = {{0, 90}, {-8, 68}, {8, 68}, {0, 90}}, lineColor = {192, 192, 192}, fillColor = {192, 192, 192},
                fillPattern =                                                                                                                                                                                                        FillPattern.Solid), Line(points = {{-90, 0}, {68, 0}}, color = {192, 192, 192}), Polygon(points = {{90, 0}, {68, -8}, {68, 8}, {90, 0}}, lineColor = {192, 192, 192}, fillColor = {192, 192, 192},
                fillPattern =                                                                                                                                                                                                        FillPattern.Solid), Line(points = {{-80, -70}, {-50, -70}, {50, 70}, {80, 70}}), Text(extent = {{-150, -150}, {150, -110}}, lineColor = {0, 0, 0}, textString = "uMax=%uMax")}),
        Diagram(coordinateSystem(preserveAspectRatio = false), graphics = {Line(points = {{0, -60}, {0, 50}}, color = {192, 192, 192}), Polygon(points = {{0, 60}, {-5, 50}, {5, 50}, {0, 60}}, lineColor = {192, 192, 192}, fillColor = {192, 192, 192}, fillPattern = FillPattern.Solid), Line(points = {{-60, 0}, {50, 0}}, color = {192, 192, 192}), Polygon(points = {{60, 0}, {50, -5}, {50, 5}, {60, 0}}, lineColor = {192, 192, 192}, fillColor = {192, 192, 192}, fillPattern = FillPattern.Solid), Line(points = {{-50, -40}, {-30, -40}, {30, 40}, {50, 40}}), Text(extent = {{46, -6}, {68, -18}}, lineColor = {128, 128, 128}, textString = "u"), Text(extent = {{-30, 70}, {-5, 50}}, lineColor = {128, 128, 128}, textString = "y"), Text(extent = {{-58, -54}, {-28, -42}}, lineColor = {128, 128, 128}, textString = "uMin"), Text(extent = {{26, 40}, {66, 56}}, lineColor = {128, 128, 128}, textString = "uMax")}));
    end Limiter;

    block ControlAVR_CT "Continous-time version of ControlAVR"
      extends Modelica.Blocks.Interfaces.BlockIcon;
      extends ArduinoIcon;
      import Modelica.Blocks.Interfaces.*;
      parameter Real Kp = 15, Td = 0.05, Nd = 5, u_e = 0.66, y_e = 2.79;
      RealInput du_set(final unit = "V") "Desired setpoint OP delta voltage of PD controller" annotation (
        Placement(transformation(extent = {{-140, 60}, {-100, 100}})));
      RealInput e(final unit = "V") "Measured voltage across the hall effect sensor" annotation (
        Placement(transformation(extent = {{-140, -20}, {-100, 20}})));
      RealOutput v(final unit = "V") "Output voltage to the electromagnet" annotation (
        Placement(transformation(extent = {{100, -10}, {120, 10}})));
    protected
      Real dy_e "OP delta e Hall sensor voltage";
      Real du(start = 0) "OP delta u input to PD(T1) control law";
      Real dy "OP delta v output voltage to the electromagnet";
      Real x_scaled;
    equation
      // Measured delta voltage at OP
      dy_e = e - y_e;
      // input to PD(T1) control law
      du = du_set - dy_e;
      // PD(T1) equations
      der(x_scaled) = (-Nd / Td * x_scaled) + du;
      dy = (-Kp * Nd ^ 2 / Td) * x_scaled + (Kp + Kp * Nd) * du;
      // Output voltage to electromagnet
      v = dy + u_e;
      annotation (
        Icon(graphics={                                                                                                                 Text(lineColor = {28, 108, 200}, extent = {{-100, -68}, {100, -98}}, textString = "Continuous-Time")}, coordinateSystem(initialScale = 0.1)));
    end ControlAVR_CT;

    partial block ArduinoIcon
      annotation (Icon(coordinateSystem(preserveAspectRatio=false), graphics={
                         Bitmap(extent = {{-88, -80}, {90, 90}},
              imageSource=
                  ""
                   +
                  ""
                   +
                  "wuAR/sjvXTWdjBZxeXAmM/eY8lvqawr4mdbTZdv8+/5HTh8JCjrvLv8A5FGw0VIWE1ztlnHQfwr9PWthUz1p6R1KABWB1DFSpAMUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFADWXNec/EbQpS6a3AC0aoIrpR2A+6/wBOx/CvSKY6K6lWUMGGCCMgj0pNXGnY+bNTsU1CzNtKABkPDIeqN2/D1rzi+iljuJbW6QxSI2Ch/wAa+gPF/g5tEd76yQvpbHLJ1NuT2/3PQ9unpXnmtaBHrEPmKyJcoAI5T/EP7p9RU7Fbnn2mX02j6lDcKx2q3ODwVPBH5V6ZebHs3KsCnBB/vDtXBf2FepeiyurSbDnaGRd657EH0ruZYWt9GSJ/9YkSKec9MUCRnt657VGSAc0pfsOtQvIFPWmIbHBDCzSqCztk7n5K57D0pTKF6de9Qs+VGTz0qJmI+UHOetMCaS4LcZ4Hp3psQeWUJGMk8Ef5/Cm29tPdTiCCNpJe6r2HqT2Fakd5b6DuWzSO+1Qf8tW5hhP/ALOR+VXGLk7RJlKMFeTNrwFJHpOu67HcuFMaxKxbpu9q9z0eOCe2jmb53YAjPb6CvnvwvHbSXM00tyDezPvmeY/MW9RnjFerQ+KdL0K3L3N0s80URKQQuGdunHoO1R7OSna2o/aRceZPQ0/HeiaN/wAI3qt/eKsYEDMWHd8fLj3zivnEo8bhXBDbQSPrXX+L/F2q+J7ki7fybSM7orWM5RO2Sf4m68n8MVy/kcliCARwO9erhaTpxafU8jGVlUenQjQEc7QeQQSPetfStLu9WuhDbpJKx656D3PpW34d8GXerlJ7stBZjo3dh6KP616ZpOlRW8Qs9Jtwir9+UjA+pPc1FfFRh7sdX+CHh8HOprLSP4syNE8LWWiKk0y/ar5vunbnafRR/Wuys9GeZhLqHb7tuDwP97/Cr1hpkNn8y5kmIw0r/ePsPQVpJHXnNuT5pO7PUhCMFyxVkNSPgAAAAYAHQVOqYpQuKdQUHSiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigBkkaSxskiq6MCGVhkEHqCK8k8X+EZNCla9sgx01zggcmEnop/2c9D+B7V69TJYo54nilRXjdSrKwyGB7Gk1cadj58VyM4yp6EDiq98uLGYY425H512Pi3wnLodx9ptQX09zw5PMX+yx9PQ/gffjb5z9llXqrLkE+lSUc5I+KrMxOQcDNWpI8nimR2jSPtUMzHoFGTVElUEBclgeOKvWWnpPF59xN5EH98jLOf9gdzTFMEMyrhZO0nOVUe/r9K31id3jug4d1IZGxkZHp2FTWcqaTa3Cm4zbSexTuYHjtfs0Nu9tayD5lb78v8Avnv9OlYl5btbTqxZijHnJya7GZ5bvJlGXZ97t6n+lczq0iyzLCpDbT8xHarwM5uvaOq6mWOUFQblv0IbYKzDKj5RjpyatgIhO1SFHcetU4xg8A810GheGr3W5gVXyrcH5pmHA+nqa9ybjFc0nZHhU3KT5Yq7MqK1mvbhIbaJpZX6beSf8K9A0HwVbabGL3Vv31wOViHKqff+8a6HR9DtdLAtdOtzLcsMvIep9yewrq9P0aO2cTTnzrj1PKr9B/WvMrYqU/dp6L8f68j1aGDUHz1NX+C/ruZ9npU14Fa4DQW4+7GvDOPf0FdDBbpDGsccYRF6Ko4FTLHnk1MqAVypJHa3cYkdSgYpaKYgooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigCOaGO4heGaNZI3BVkYZBHoRXkHjXwhJocMs9qjyacVJDfeMRPY98eh/OvY6QgMCCAQeCDSauNOx81WHhzVNWs5by2tJRZQruluNuQQOyD+JvYVYvdI1CbR5jBYzaXBGW8yCdCLlwAMMfRWHYcDvX0YqKqhVAUDgAcAVia9or6hsuIjmaMYx6j2oi3CSkugppSi4ny+EaNh0GDxjpVuG9nt1KwysnsvIr0DxJ4MadJL2wiAlyTLAq4zjqVHY+orz9rZ0fBzz3xXt03TxELr7j5+r7XDTs9Oz7kk2pXMxCtPKUPVRgVBFbtLIEjRizHAUckn+ta+kaBeavceVbRcD78jDCqPc16VoXhqy0Tb5UZur5uN+3J/wCAjsKzqVaOGXLFa9l+v9XNKVKti3zSfu93+n9WOb8P+Bgqrd6uNqjkQdz/AL3+Feh2GmS3kaJAv2ayXgMBjcPRRWpY6D84nvsO/aEfdX6+tbax9OOleXUqTqvmmz2KNGFGPLBFS0sYbSLyoIwq9z1LH1J71bSOpAgFOqTQQDFLRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQBnX+mifM0ICzcFu2//wCv71w2peHdGuJ3klsts24+YVYpk+4r0qq9xYWt0QZ7eOQjuwoTlF3i7ClGM1aSucfpOlmeFYLCJIbdThnA+Uf4mursdMt7BD5YJkI+aRvvH/61W0RIkCRoqqOAqjAFOpJdx+ggAFLRRTAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooA//9k=",

              fileName=
                  "modelica://ML/../MagLevApp/julia/paper/Arduino_Uno_-_R3.jpg")}),
          Diagram(coordinateSystem(preserveAspectRatio=false)));
    end ArduinoIcon;

    partial block MagLevSchematicsIcon
      annotation (Icon(coordinateSystem(preserveAspectRatio=false), graphics={
                         Bitmap(extent = {{-92, -98}, {100, 94}},
              imageSource=
                  "",

              fileName="modelica://ML/../resources/MagLevSchematics.png")}),
          Diagram(coordinateSystem(preserveAspectRatio=false)));
    end MagLevSchematicsIcon;
  end Components;

  annotation (
    uses(Modelica(version = "3.2.2"), Modelica_DeviceDrivers(version="1.6.0")));
end ML;
